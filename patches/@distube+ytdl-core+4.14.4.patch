diff --git a/node_modules/@distube/ytdl-core/lib/index.js b/node_modules/@distube/ytdl-core/lib/index.js
index 7bf69b5..ffa9849 100644
--- a/node_modules/@distube/ytdl-core/lib/index.js
+++ b/node_modules/@distube/ytdl-core/lib/index.js
@@ -70,11 +70,11 @@ const pipeAndSetEvents = (req, stream, end) => {
 const downloadFromInfoCallback = (stream, info, options) => {
   options = options || {};
 
-  let err = utils.playError(info.player_response);
-  if (err) {
-    stream.emit('error', err);
-    return;
-  }
+  // let err = utils.playError(info.player_response);
+  // if (err) {
+  //   stream.emit('error', err);
+  //   return;
+  // }
 
   if (!info.formats.length) {
     stream.emit('error', Error('This video is unavailable'));
diff --git a/node_modules/@distube/ytdl-core/lib/info.js b/node_modules/@distube/ytdl-core/lib/info.js
index 8276e23..a0fc666 100644
--- a/node_modules/@distube/ytdl-core/lib/info.js
+++ b/node_modules/@distube/ytdl-core/lib/info.js
@@ -43,8 +43,8 @@ exports.getBasicInfo = async(id, options) => {
   options.requestOptions.dispatcher = dispatcher;
   const info = await retryFunc(getWatchHTMLPage, [id, options], retryOptions);
 
-  const playErr = utils.playError(info.player_response);
-  if (playErr) throw playErr;
+  // const playErr = utils.playError(info.player_response);
+  // if (playErr) throw playErr;
 
 
   Object.assign(info, {
@@ -335,8 +335,8 @@ const fetchIosJsonPlayer = async(videoId, options) => {
     },
   };
   const response = await utils.request('https://youtubei.googleapis.com/youtubei/v1/player', opts);
-  const playErr = utils.playError(response);
-  if (playErr) throw playErr;
+  // const playErr = utils.playError(response);
+  // if (playErr) throw playErr;
   if (!response.videoDetails || videoId !== response.videoDetails.videoId) {
     const err = new Error('Malformed response from YouTube');
     err.response = response;
@@ -399,8 +399,8 @@ const fetchAndroidJsonPlayer = async(videoId, options) => {
     },
   };
   const response = await utils.request('https://youtubei.googleapis.com/youtubei/v1/player', opts);
-  const playErr = utils.playError(response);
-  if (playErr) throw playErr;
+  // const playErr = utils.playError(response);
+  // if (playErr) throw playErr;
   if (!response.videoDetails || videoId !== response.videoDetails.videoId) {
     const err = new Error('Malformed response from YouTube');
     err.response = response;
